# -*- coding: utf-8 -*-
"""RANDOM FOREST CLASSIFICATION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdrO3hyro5rFqZt_Bby2iWBkchRqfzlf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix


iris = load_iris()
X = iris.data
y = iris.target

#Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Train the Random Forest classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

#Predict on the test set
y_pred = rf.predict(X_test)

#confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, cmap='magma', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('CONFUSION MATRIX')
plt.show()


importance = rf.feature_importances_
features = iris.feature_names
df_importance = pd.DataFrame({'Feature': features, 'Importance': importance})
df_importance = df_importance.sort_values(by='Importance', ascending=False)
plt.figure(figsize=(8, 6))
sns.barplot(x='Importance', y='Feature', data=df_importance)
plt.title('FEATURE IMPORTANCE')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target

# Create a DataFrame from the feature matrix
df = pd.DataFrame(X, columns=iris.feature_names)
df['target'] = y

#scatter plot using seaborn
sns.scatterplot(x='sepal length (cm)', y='sepal width (cm)', hue='target', data=df, palette='flare')

#plot labels and title
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Iris Dataset - Sepal Length vs Sepal Width')


plt.show()